import streamlit as st
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier

# --------- Chargement des donn√©es ---------
def load_data():
    iris = load_iris()
    df = pd.DataFrame(iris.data, columns=iris.feature_names)
    df['species'] = iris.target
    return df, iris.target_names

df, target_names = load_data()

# --------- Entra√Ænement du mod√®le ---------
model = RandomForestClassifier()
model.fit(df.iloc[:, :-1], df['species'])

# --------- Personnalisation de la page ---------
st.set_page_config(page_title="Iris Flower Classifier ", layout="centered")
st.title("üå∏ Iris Flower Classification")
st.markdown("Utilisez les curseurs dans la **barre lat√©rale** pour pr√©dire l'esp√®ce d'une fleur d'Iris.")

# --------- Interface utilisateur (sidebar) ---------
st.sidebar.header(" Param√®tres d'entr√©e")

sepal_length = st.sidebar.slider(
    "Longueur du s√©pale (cm)", 
    float(df['sepal length (cm)'].min()), 
    float(df['sepal length (cm)'].max()), 
    float(df['sepal length (cm)'].mean())
)

sepal_width = st.sidebar.slider(
    "Largeur du s√©pale (cm)", 
    float(df['sepal width (cm)'].min()), 
    float(df['sepal width (cm)'].max()), 
    float(df['sepal width (cm)'].mean())
)

petal_length = st.sidebar.slider(
    "Longueur du p√©tale (cm)", 
    float(df['petal length (cm)'].min()), 
    float(df['petal length (cm)'].max()), 
    float(df['petal length (cm)'].mean())
)

petal_width = st.sidebar.slider(
    "Largeur du p√©tale (cm)", 
    float(df['petal width (cm)'].min()), 
    float(df['petal width (cm)'].max()), 
    float(df['petal width (cm)'].mean())
)

# --------- Pr√©diction ---------
input_data = [sepal_length, sepal_width, petal_length, petal_width]
prediction = model.predict([input_data])
predicted_species = target_names[prediction[0]]

# --------- Affichage des r√©sultats ---------
st.subheader("Caract√©ristiques fournies")
features_df = pd.DataFrame(
    {
        "Mesure": [
            "Longueur du s√©pale", 
            "Largeur du s√©pale", 
            "Longueur du p√©tale", 
            "Largeur du p√©tale"
        ],
        "Valeur (cm)": input_data
    }
)
st.table(features_df)

st.subheader(" R√©sultat de la pr√©diction")
st.success(f" Esp√®ce pr√©dite : **{predicted_species.capitalize()}**")

# --------- Footer ---------
st.markdown("---")
st.markdown(
    "<small>D√©mo d'une application Streamlit - Classification avec Random Forest üå≤</small>",
    unsafe_allow_html=True
)
